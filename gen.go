// The following directive is necessary to make the package coherent:

// +build ignore

// This program generates ipv4_address_space.go. It can be invoked by running
// go generate
package main

import (
	"encoding/xml"
	"log"
	"net/http"
	"os"
	"strconv"
	"text/template"
	"time"
)

type Registry struct {
	Record []Record `xml:"record"`
}

type Record struct {
	Prefix string `xml:"prefix"`
	Whois  string `xml:"whois"`
}

func main() {
	generate(tplV4, "ipv4_address_space.go", "https://www.iana.org/assignments/ipv4-address-space/ipv4-address-space.xml")
	generate(tplV6, "ipv6_address_space.go", "https://www.iana.org/assignments/ipv6-unicast-address-assignments/ipv6-unicast-address-assignments.xml")
}

func generate(genFun func(*Registry, *os.File), filename, url string) {
	rsp, err := http.Get(url)
	die(err)
	defer rsp.Body.Close()

	registry := Registry{}
	die(xml.NewDecoder(rsp.Body).Decode(&registry))

	file, err := os.Create(filename)
	die(err)
	defer file.Close()

	header.Execute(file, struct {
		Timestamp time.Time
		URL       string
	}{
		Timestamp: time.Now(),
		URL:       url,
	})

	genFun(&registry, file)
}

func tplV4(reg *Registry, file *os.File) {
	var prefixes [256]string
	for _, record := range reg.Record {
		if len(record.Prefix) != 5 || record.Prefix[3:5] != "/8" {
			panic("invalid prefix: " + record.Prefix)
		}
		octet, _ := strconv.Atoi(record.Prefix[0:3])
		prefixes[octet] = record.Whois
	}

	die(ipv4template.Execute(file, prefixes))
}

func tplV6(reg *Registry, file *os.File) {
	list := make(map[string]string)
	for _, record := range reg.Record {
		if record.Whois != "" {
			list[record.Prefix] = record.Whois
		}
	}

	die(ipv6template.Execute(file, list))
}

func die(err error) {
	if err != nil {
		log.Fatal(err)
	}
}

var (
	header = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at
// {{ .Timestamp }}
// using data from
// {{ .URL }}
package ripego
`))

	ipv4template = template.Must(template.New("").Parse(`
var ipv4prefixes = []string{
{{- range . }}
	{{ printf "%q" . }},
{{- end }}
}
`))

	ipv6template = template.Must(template.New("").Parse(`
func initIPv6(){
{{- range $key, $val := . }}
	addIPv6Prefix({{ printf "%q, %q" $key $val  }})
{{- end }}
}
`))
)
